CREATE OR REPLACE FUNCTION create_constraint_if_not_exists(  t_name TEXT, c_name TEXT, constraint_sql TEXT)  RETURNS VOID AS$$BEGIN  IF NOT EXISTS(SELECT constraint_name                FROM information_schema.constraint_column_usage                WHERE table_name = t_name AND constraint_name = c_name)  THEN    EXECUTE constraint_sql;  END IF;END;$$ LANGUAGE plpgsql;DO$$DECLARE  db_name CONSTANT TEXT := 'machine_repair';  db_exists        NUMERIC(1);BEGIN  SELECT COUNT(datname)  INTO db_exists  FROM pg_catalog.pg_database  WHERE datname = db_name;  IF (db_exists = 0)  THEN CREATE DATABASE db_name;  END IF;  CREATE TABLE IF NOT EXISTS "users" (    "id"       SERIAL4     NOT NULL,    "login"    VARCHAR(32) NOT NULL,    "password" TEXT        NOT NULL,    "enabled"  BOOL        NOT NULL,    PRIMARY KEY ("id"),    CONSTRAINT "uq_users_login" UNIQUE ("login")  );  CREATE TABLE IF NOT EXISTS "clients" (    "id"      SERIAL4     NOT NULL,    "name"    VARCHAR(32) NOT NULL,    "user_id" INT         NOT NULL,    PRIMARY KEY ("id"),    CONSTRAINT "uq_clients_users_user_id" UNIQUE ("user_id")  );  CREATE TABLE IF NOT EXISTS "users_roles" (    "user_id" INT NOT NULL,    "role_id" INT NOT NULL  );  CREATE TABLE IF NOT EXISTS "session_management" (    "session_timeout" INT NOT NULL DEFAULT 300  );  CREATE TABLE IF NOT EXISTS "roles" (    "id"   SERIAL4 NOT NULL,    "name" TEXT    NOT NULL,    PRIMARY KEY ("id"),    CONSTRAINT "uq_roles_name" UNIQUE ("name")  );  CREATE TABLE IF NOT EXISTS "orders" (    "id"             SERIAL4     NOT NULL,    "start"          DATE        NOT NULL,    "status"         VARCHAR(10) NOT NULL,    "client_id"      INT         NOT NULL,    "repair_type_id" INT         NOT NULL,    "machine_id"     INT         NOT NULL,    PRIMARY KEY ("id")  );  CREATE TABLE IF NOT EXISTS "repair_types" (    "id"       SERIAL4        NOT NULL,    "name"     TEXT           NOT NULL,    "price"    DECIMAL(10, 2) NOT NULL,    "duration" INT            NOT NULL,    PRIMARY KEY ("id")  );  CREATE TABLE IF NOT EXISTS "machines" (    "id"              SERIAL4 NOT NULL,    "serial_number"   TEXT    NOT NULL,    "year"            INT     NOT NULL,    "times_repaired"  INT     NOT NULL,    "machine_type_id" INT     NOT NULL,    PRIMARY KEY ("id")  );  CREATE TABLE IF NOT EXISTS "machine_types" (    "id"        SERIAL4 NOT NULL,    "name"      TEXT    NOT NULL,    "trademark" TEXT    NOT NULL,    "country"   TEXT    NOT NULL,    PRIMARY KEY ("id")  );  PERFORM create_constraint_if_not_exists('clients', 'fq_clients_users_user_id', 'ALTER TABLE clients ADD CONSTRAINT fq_clients_users_user_id FOREIGN KEY (user_id) REFERENCES users (id)');  PERFORM create_constraint_if_not_exists('users_roles', 'fq_roles_users_user_id', 'ALTER TABLE users_roles ADD CONSTRAINT fq_roles_users_user_id FOREIGN KEY (user_id) REFERENCES users (id)');  PERFORM create_constraint_if_not_exists('users_roles', 'fq_roles_users_role_id', 'ALTER TABLE users_roles ADD CONSTRAINT fq_roles_users_role_id FOREIGN KEY (role_id) REFERENCES roles (id)');  PERFORM create_constraint_if_not_exists('orders', 'fk_client_order', 'ALTER TABLE orders ADD CONSTRAINT fk_client_order FOREIGN KEY (client_id) REFERENCES clients (id)');  PERFORM create_constraint_if_not_exists('orders', 'fk_client_repair_types', 'ALTER TABLE orders ADD CONSTRAINT fk_client_repair_types FOREIGN KEY (repair_type_id) REFERENCES repair_types (id)');  PERFORM create_constraint_if_not_exists('orders', 'fk_machine_order', 'ALTER TABLE orders ADD CONSTRAINT fk_machine_order FOREIGN KEY (machine_id) REFERENCES machines (id)');  PERFORM create_constraint_if_not_exists('machines', 'fk_machines_machine_types', 'ALTER TABLE machines ADD CONSTRAINT fk_machines_machine_types FOREIGN KEY (machine_type_id) REFERENCES machine_types (id)');  INSERT INTO "users" ("id", "login", "password", "enabled") VALUES (1, 'admin', 'admin', 't');  INSERT INTO "users" ("id", "login", "password", "enabled") VALUES (2, 'manager', 'manager', 't');  INSERT INTO "users" ("id", "login", "password", "enabled") VALUES (3, 'client', 'client', 't');  INSERT INTO "roles" ("id", "name") VALUES (1, 'ROLE_ADMIN');  INSERT INTO "roles" ("id", "name") VALUES (2, 'ROLE_MANAGER');  INSERT INTO "roles" ("id", "name") VALUES (3, 'ROLE_CLIENT');  INSERT INTO "users_roles" ("user_id", "role_id") VALUES (1, 1);  INSERT INTO "users_roles" ("user_id", "role_id") VALUES (1, 2);  INSERT INTO "users_roles" ("user_id", "role_id") VALUES (2, 2);  INSERT INTO "users_roles" ("user_id", "role_id") VALUES (3, 3);  INSERT INTO "machine_types" VALUES ('1', 'Dental', 'Oral-B', 'USA');  INSERT INTO "machine_types" VALUES ('2', 'Auto industry', 'Tesla', 'USA');  INSERT INTO "repair_types" VALUES ('1', 'Overhaul', '15000.00', '15');  INSERT INTO "repair_types" VALUES ('2', 'Maintenance', '5000.00', '7');  INSERT INTO "repair_types" VALUES ('3', 'Off-schedule', '30000.00', '5');  INSERT INTO "repair_types" VALUES ('4', 'Minor', '7000.00', '9');  INSERT INTO "clients" ("id", "name", "user_id") VALUES (1, 'Client', 3);  INSERT INTO "session_management" ("session_timeout") VALUES (300);END$$ LANGUAGE plpgsql;